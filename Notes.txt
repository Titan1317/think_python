1) A program is a sequence of instructions that specify a computation.

2) Programming is the process of breaking down a large, complex task 
	into smaller and smaller subtasks, until the subtasks are simple
	enough be performed with one of the following basic instructions;

	-Input:
		Get data from the keyboard, a file, the network or some other device.
	-Output:
		Display data on the screen, save it in a file, send it over the network etc.
	-Math:
		Perform basic basic mathematical operation like addition and multiplication.
	-Conditional execution:
		Check for certain conditions and run the appropriate code.
	-Repition:
		Perform some action repeatedly, usually with some variation.

3) A value is one of the basic things a program works with like a letter or a number.

4) Programming languages are formal languages that have been designed to express computations.

5) Syntax rules in formal languages are strict and govern the structure of statements.
	They come in two flavors:
		-Tokens:
			-3 += 3$6
			$ is not a legal token in math
		-Combination of tokens:
			-3 += 3
			+= is not a legal combination of tokens in math 

6) Variables are names that refer to values.

7) Assignment are names that refer to a value.

8) An expression is a combination of vlaues, variables and operators.

9) The interpreter evaluates expressions and executes statements.

10) A statement is a unit of code that has an ffect like creating a variable or displaying a value. Statements generally don't have values.

11) A traceback tells you what program file the error was in, what line and what functions were executing at that time.
	The order of the functions in traceback is the same as the stack diagram.

12) A development plan is a process for writing programs. The process we used in this
	case study is “encapsulation and generalization”. The steps of this process are:

	1. Start by writing a small program with no function definitions.

	2. Once you get the program working, identify a coherent piece of it, encapsulate
		the piece in a function and give it a name.

	3. Generalize the function by adding appropriate parameters.

	4. Repeat steps 1–3 until you have a set of working functions. Copy and paste working
		code to avoid retyping (and re-debugging).

	5. Look for opportunities to improve the program by refactoring. For example, if
		you have similar code in several places, consider factoring it into
		an appropriately general function.

13) The key aspects of the 'incremental development' process are:
	1. Start with a working program and make small incremental changes. At any point,
		if there is an error, you should have a good idea where it is.

	2. Use variables to hold intermediate values so you can display and check them.

	3. Once the program is working, you might want to remove some of the scaffolding
		or consolidate multiple statements into compound expressions, but only if it does
		not make the program difficult to read.

14) Breaking a large program into smaller functions creates natural checkpoints for
	debugging. If a function is not working, there are three possibilities to consider:

		• There is something wrong with the arguments the function is getting; a precondition
			is violated.

		• There is something wrong with the function; a postcondition is violated.

		• There is something wrong with the return value or the way it is being used.

15) Guarding is a programming pattern that uses conditional statements to check for and handle
	circumstances that might cause an error.

16) Scaffolding is code that is used during program development but is not part of the final version.

17) 








	