Programs:
• A program is a sequence of instructions that specify a computation.

• Programming is the process of breaking down a large, complex task 
	into smaller and smaller subtasks, until the subtasks are simple
	enough be performed with one of the following basic instructions;

	-Input:
		Get data from the keyboard, a file, the network or some other device.
	-Output:
		Display data on the screen, save it in a file, send it over the network etc.
	-Math:
		Perform basic basic mathematical operation like addition and multiplication.
	-Conditional execution:
		Check for certain conditions and run the appropriate code.
	-Repition:
		Perform some action repeatedly, usually with some variation.

• A value is one of the basic things a program works with like a letter or a number.

• Programming languages are formal languages that have been designed to express computations.

• Syntax rules in formal languages are strict and govern the structure of statements.
	They come in two flavors:
		-Tokens:
			-3 += 3$6
			$ is not a legal token in math
		-Combination of tokens:
			-3 += 3
			+= is not a legal combination of tokens in math 

• Variables are names that refer to values.

• Assignment are names that refer to a value.

• An expression is a combination of vlaues, variables and operators.

• The interpreter evaluates expressions and executes statements.

• A statement is a unit of code that has an ffect like creating a variable or displaying a value. Statements generally don't have values.

• A traceback tells you what program file the error was in, what line and what functions were executing at that time.
	The order of the functions in traceback is the same as the stack diagram.

PROGRAM DEVELOPMENT:

• A development plan is a process for writing programs. One process is is “encapsulation and generalization”. The steps of this process are:

	1. Start by writing a small program with no function definitions.

	2. Once you get the program working, identify a coherent piece of it, encapsulate
		the piece in a function and give it a name.

	3. Generalize the function by adding appropriate parameters.

	4. Repeat steps 1–3 until you have a set of working functions. Copy and paste working
		code to avoid retyping (and re-debugging).

	5. Look for opportunities to improve the program by refactoring. For example, if
		you have similar code in several places, consider factoring it into
		an appropriately general function.

• The key aspects of the 'incremental development' process are:
	1. Start with a working program and make small incremental changes. At any point,
		if there is an error, you should have a good idea where it is.

	2. Use variables to hold intermediate values so you can display and check them.

	3. Once the program is working, you might want to remove some of the scaffolding
		or consolidate multiple statements into compound expressions, but only if it does
		not make the program difficult to read.

• Breaking a large program into smaller functions creates natural checkpoints for
	debugging. If a function is not working, there are three possibilities to consider:

		• There is something wrong with the arguments the function is getting; a precondition
			is violated.

		• There is something wrong with the function; a postcondition is violated.

		• There is something wrong with the return value or the way it is being used.

• Guarding is a programming pattern that uses conditional statements to check for and handle
	circumstances that might cause an error.

• Scaffolding is code that is used during program development but is not part of the final version.

LISTS:

• The syntax for accessing the elements of a list is the same as for accessing the characters
	of a string—the bracket operator. The expression inside the brackets specifies the
	index. Remember that the indices start at 0.

• List indices work the same way as string indices:
	- Any integer expression can be used as an index.
	- If you try to read or write an element that does not exist, you get an IndexError.
	- If an index has a negative value, it counts backward from the end of the list.

• Operators:
    The in operator also works on lists.
    The slice operator also works on lists.
    The + operator concatenates list.
    The * operator repeats a list a given number of times.
    If you don’t need the removed value, you can use the del operator. del list[index]

• If you want to write or update the elements, you need the indices.

• Since lists are mutable, it is often useful to make a copy before performing operations
	that modify lists.

• The append method adds a new element to the end of a list and returns None.
	- Extend takes a list as an argument and appends all of the elements, leaves the list
		unmodified.
	- Sort arranges the elements of the list from low to high and return None.

• There are several ways to delete elements from a list. If you know the index of the
	element you want, you can use the pop method, which returns the element.
	- If you don’t provide an index, it deletes and returns the last element.
	- If you know the element you want to remove (but not the index), you can use remove,
		The return value from remove is None
	
• The list function breaks a string into individual letters and returns a list of all the
	letters. If you want to break a string into words, you can use the split method, an 
	optional argument called a delimiter specifies which characters to use as word boundaries.





	